// Adapted from: https://github.com/SebLague/Object-Placement-with-Physics/blob/master/Assets/PhysicsSimulation.cs
using System.Collections.Generic;
using System.Linq;
using UnityEngine;

using Runtime.Shared;

namespace Runtime.PCG
{
    [ExecuteInEditMode]
    [AddComponentMenu("PCG/Physics Object Placer")]
    public sealed class PhysicsObjectPlacer : ObjectPlacer
    {
    #region Fields
        public int maxIterations = 1000;
        
        public Vector2 forceMinMax;
        public float forceAngleInDegrees;
        public bool randomizeForceAngle;

        public RigidbodyConstraints positionContraints = RigidbodyConstraints.None;
        
        private PhysicsSimulatedBody[] simulatedBodies;
        private List<Rigidbody> generatedRigidbodies;
        private List<Collider> generatedColliders;
    #endregion Fields

        public override void Place ()
        {
            AutoGenerateComponents();
            simulatedBodies = FindObjectsOfType<Rigidbody>().Select(rb => new PhysicsSimulatedBody(rb, rb.transform.IsChildOf(transform))).ToArray();
        
            // Add force to bodies
            foreach (PhysicsSimulatedBody body in simulatedBodies) 
            {
                if (body.isChild) {
                    float randomForceAmount = Random.Range(forceMinMax.x, forceMinMax.y);
                    float forceAngle = (randomizeForceAngle ? Random.Range(0, 360f) : forceAngleInDegrees) * Mathf.Deg2Rad;
                    Vector3 forceDir = new(Mathf.Sin(forceAngle), 0, Mathf.Cos(forceAngle));
                    body.rigidbody.AddForce(forceDir * randomForceAmount, ForceMode.Impulse);
                }
            }

            SimulateInstant();

            // Reset bodies which are not child objects of the transform to which this script is attached
            foreach (PhysicsSimulatedBody body in simulatedBodies)
            {
                if (!body.isChild)
                {
                    body.Reset();
                }
            }

            RemoveAutoGeneratedComponents();
        }

        private void SimulateInstant ()
        {
            // Run simulation for maxIteration frames, or until all child rigidbodies are sleeping
            Physics.simulationMode = SimulationMode.Script;

            for (int i = 0; i < maxIterations; i++)
            {
                Physics.Simulate(Time.fixedDeltaTime);

                if (AllSleeping()) break;
            }

            Physics.simulationMode = SimulationMode.FixedUpdate;
        }

        private bool AllSleeping ()
        {
            return simulatedBodies.All(body => body.rigidbody.IsSleeping() || !body.isChild);
        }

        // Automatically add rigidbody and a collider to object if it doesn't already have
        private void AutoGenerateComponents ()
        {
            generatedRigidbodies = new List<Rigidbody>();
            generatedColliders = new List<Collider>();
            Transform[] children = Utils.GetAllChildren(transform);

            foreach (Transform child in children)
            {
                if (!child.GetComponent<MeshRenderer>()) continue;

                if (!child.GetComponent<Rigidbody>())
                {
                    Rigidbody rigidbody = child.gameObject.AddComponent<Rigidbody>();

                    rigidbody.collisionDetectionMode = CollisionDetectionMode.Continuous;
                    if (child.TryGetComponent(out MeshFilter meshFilter)) 
                    {
                        rigidbody.mass = Mathf.Clamp(Utils.VolumeOfMesh(meshFilter.sharedMesh), 1f, 3000f);
                    }

                    rigidbody.constraints = positionContraints;
                    //rotationConstraints

                    generatedRigidbodies.Add(rigidbody);
                }

                if (!child.GetComponent<Collider>())
                {
                    MeshCollider meshCollider = child.gameObject.AddComponent<MeshCollider>();
                    meshCollider.convex = true;
                    generatedColliders.Add(meshCollider);
                }
            }
        }

        // Remove the components which were generated at start of simulation
        private void RemoveAutoGeneratedComponents()
        {
            foreach (Rigidbody rb in generatedRigidbodies)
            {
                DestroyImmediate(rb);
            }

            foreach (Collider c in generatedColliders)
            {
                DestroyImmediate(c);
            }
        }

        public override void ResetPlaced ()
        {
            if (simulatedBodies != null)
            {
                foreach (PhysicsSimulatedBody body in simulatedBodies)
                {
                    body.Reset();
                }
            }
        }
    }
}